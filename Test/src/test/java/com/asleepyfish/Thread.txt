1.读写公平
Semaphore mutex = 1;
Semaphore rmutex = 1;
Semaphore wmutex = 1;
int readCount = 0;

reader() {
    while(true) {
        P(wmutex)
        P(rmutex)
        if (readCount = 0) {
            P(mutex)
        }
        readCount++;
        V(rmutex)
        V(wmutex)
        read
        P(rmutex)
        readCount--
        if (readCount = 0) {
            V(mutex)
        }
        V(rmutex)
    }
}

writer() {
    while (true) {
        P(wmutex)
        P(mutex)
        write
        V(mutex)
        V(wmutex)
    }
}

2.司机和售票员
semaphore close1 = 0
semaphore close2 = 0
semaphore open1 = 0
semaphore open2 = 0

driver() {
    while (true) {
        P(close1);
        P(close2);
        开车;
        到站停车;
        V(open1);
        V(open2);
    }
}

conductor-1() {
    while(true) {
        关门;
        V(close1);
        售票;
        P(open1);
        开门;
    }
}

conductor-2() {
    while(true) {
        关门;
        V(close2);
        售票;
        P(open2);
        开门;
    }
}

3.理发师问题
int chairs = n;
int waiting = 0;
Semaphore barbers = 0;
Semaphore customers = 0;
Semaphore mutex = 1;

barber() {
    while (true) {
        P(customers)
        P(mutex)
        waiting--;
        V(barbers);
        V(mutex);
        理发;
    }
}

customer_i() {
    while (true) {
        P(mutex)
        if (waiting < chairs) {
            waiting++;
            V(customers);
            V(mutex);
            P(barbers);
            等待理发;
        } else {
            V(mutex);
        }
    }
}

4.生产装配问题
Semaphore fullA = 0;
Semaphore emptyA = n;
Semaphore fullB = 0;
Semaphore emptyB = n;
Semaphore mutexA = 1;
Semaphore mutexB = 1;

worker_A() {
    while (true) {
        P(emptyA);
        P(mutexA);
        放A;
        V(mutexA);
        V(fullA);
    }
}

worker_B() {
    while (true) {
        P(emptyB);
        P(mutexB);
        放B;
        V(mutexB);
        V(fullB);
    }
}

assembly() {
    while (true) {
        P(fullA);
        P(mutexA);
        拿A;
        V(mutexA);
        V(emptyA);
        P(fullB);
        P(mutexB);
        拿B;
        V(mutexB);
        V(emptyB)
    }
}